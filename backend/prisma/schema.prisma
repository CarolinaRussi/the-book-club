generator client {
  provider = "prisma-client"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model book {
  id          String  @id @default(cuid())
  title       String     @db.VarChar(255)
  author      String?    @db.VarChar(255)
  description String?
  cover_url   String?    @db.VarChar(255)
  created_at  DateTime   @default(now()) @db.Timestamp(6)
  meeting    meeting[]
  review     review[]
}

model club {
  id              String  @id @default(cuid())
  name            String      @db.VarChar(255)
  invitation_code String      @unique @db.VarChar(255)
  owner_id        String
  status          status_enum @default(active)
  created_at      DateTime    @default(now()) @db.Timestamp(6)
  description     String
  user           user       @relation(fields: [owner_id], references: [id], onDelete: Restrict, onUpdate: NoAction)
  meeting        meeting[]
  member         member[]
  review         review[]
}

model meeting {
  id         String  @id @default(cuid())
  club_id    String
  location   String   @db.VarChar(255)
  date_time  DateTime @db.Timestamp(6)
  book_id    String
  created_at DateTime @default(now()) @db.Timestamp(6)
  book      book    @relation(fields: [book_id], references: [id], onDelete: Restrict, onUpdate: NoAction)
  club      club    @relation(fields: [club_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model member {
  id        String  @id @default(cuid())
  user_id   String
  club_id   String
  joined_at DateTime @default(now()) @db.Timestamp(6)
  club     club    @relation(fields: [club_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user     user    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model review {
  id             String  @id @default(cuid())
  user_id        String
  club_id        String
  book_id        String
  reading_status reading_status_enum
  rating         Int?
  review         String?
  created_at     DateTime            @default(now()) @db.Timestamp(6)
  book          book               @relation(fields: [book_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  club          club               @relation(fields: [club_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user          user               @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user {
  id                        String  @id @default(cuid())
  name                      String      @db.VarChar(255)
  email                     String      @unique @db.VarChar(255)
  password                  String      @db.VarChar(255)
  profile_picture           String?     @db.VarChar(255)
  favorites_genres          String[]    
  bio                       String?
  status                    status_enum @default(active)
  created_at                DateTime    @default(now()) @db.Timestamp(6)
  nickname                  String      @db.VarChar(255)
  profile_picture_public_id String?     @db.VarChar(255)
  club                     club[]
  member                   member[]
  review                   review[]
}

enum reading_status_enum {
  not_started
  started
  finished
}

enum status_enum {
  active
  inactive
}
